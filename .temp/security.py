import os
import jwt
import datetime
from passlib.context import CryptContext
from fastapi import Depends, HTTPException
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials

# ðŸ”¥ ConfiguraÃ§Ã£o para garantir que Django esteja configurado antes de acessar `settings`
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")
import django
django.setup()

from django.conf import settings  # ðŸ”¥ Agora podemos importar `settings`

# ðŸ”¥ ConfiguraÃ§Ã£o de hashing de senhas
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# ðŸ”¥ FunÃ§Ã£o para gerar um JWT (Access Token)
def create_access_token(data: dict, expires_delta: int = None):
    """Gera um token JWT com os dados do usuÃ¡rio."""
    to_encode = data.copy()
    expire = datetime.datetime.utcnow() + datetime.timedelta(
        seconds=expires_delta or settings.JWT_EXPIRATION
    )
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, settings.JWT_SECRET, algorithm=settings.JWT_ALGORITHM)
    return encoded_jwt

# ðŸ”¥ FunÃ§Ã£o para gerar um Refresh Token
def create_refresh_token(data: dict):
    """Gera um Refresh Token com validade maior."""
    return create_access_token(data, settings.JWT_REFRESH_EXPIRATION)

# ðŸ”¥ FunÃ§Ã£o para verificar um token JWT
def verify_token(token: str):
    """Verifica se um token JWT Ã© vÃ¡lido."""
    try:
        payload = jwt.decode(token, settings.JWT_SECRET, algorithms=[settings.JWT_ALGORITHM])
        return payload  # Retorna os dados do usuÃ¡rio
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Token expirado")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Token invÃ¡lido")

# ðŸ”¥ Middleware para verificar tokens JWT nas requisiÃ§Ãµes
security = HTTPBearer()

def get_current_user(token: HTTPAuthorizationCredentials = Depends(security)):
    """Middleware que protege rotas autenticadas."""
    payload = verify_token(token.credentials)
    return payload
